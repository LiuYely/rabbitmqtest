# 初始化大小、最小、最大
druid.initialSize=5
druid.minIdle=5
druid.maxActive=300
# 获取连接等待超时时间（单位：毫秒）
druid.maxWait=60000
# 间隔多久进行一次检测，检测需要关闭的空闲连接（单位：毫秒）
druid.timeBetweenEvictionRunsMillis=60000
# 一个连接在池中最小生存的时间（单位：毫秒）
druid.minEvictableIdleTimeMillis=300000
druid.validationQuery=SELECT 1 FROM DUAL
druid.testWhileIdle=true
druid.testOnBorrow=false
druid.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小
druid.poolPreparedStatements=true
druid.maxOpenPreparedStatements=20
# 监控统计拦截的filters，去掉后监控界面sql无法统计，wall用于防火墙
druid.filters=stat,wall,log4j
# 通过connectionProperties属性来打开mergeSQL功能：慢SQL记录
druid.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据
druid.useGlobalDataSourceStat=true

## 连接池配置
## 初始化大小，最小，最大
#spring.datasource.initialSize=5  
#spring.datasource.minIdle=5  
#spring.datasource.maxActive=20  
## 配置获取连接等待超时的时间
#spring.datasource.maxWait=60000  
## 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
#spring.datasource.timeBetweenEvictionRunsMillis=60000  
## 配置一个连接在池中最小生存的时间，单位是毫秒
#spring.datasource.minEvictableIdleTimeMillis=300000
## 测试连接是否有效的sql
#spring.datasource.validationQuery=select 'x'
## 建议配置为true，不影响性能，并且保证安全性
## 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效
#spring.datasource.testWhileIdle=true
## 申请连接时执行validationQuery检测连接是否有效
#spring.datasource.testOnBorrow=false
## 归还连接时执行validationQuery检测连接是否有效
#spring.datasource.testOnReturn=false
## 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true
#spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
## 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
## 监控统计用的filter:stat
## 日志用的filter:log4j
## 防御sql注入的filter:wall
##spring.datasource.filters=stat,log4j,wall